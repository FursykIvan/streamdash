import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ContentType
from aiogram.fsm.storage.memory import MemoryStorage
import logging
from voice_handler import handle_voice_query
from dotenv import load_dotenv

# Logging settings
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# Initializing the Telegram bot
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

async def download_voice_message(message: Message) -> bytes:
    """
    Downloads a voice message from Telegram.

    Args:
        message (Message): The Telegram message containing the voice file

    Returns:
        bytes: The binary data of the voice message

    Raises:
        Exception: If there's an error downloading the voice message
    """
    try:
        file = await bot.download(message.voice.file_id)
        return file.read() if hasattr(file, 'read') else file
    except Exception as e:
        logger.error(f"Voice download error: {e}")
        raise

@dp.message(F.content_type == ContentType.VOICE)
async def voice_message_handler(message: Message):
    """
    Handles voice messages received by the Telegram bot.

    This handler:
    1. Downloads the voice message
    2. Processes it using the voice handler to extract weather information
    3. Sends the weather information back to the user

    Args:
        message (Message): The Telegram message containing the voice file
    """
    try:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.id}")

        voice_data = await download_voice_message(message)
        logger.debug("–û—Ç—Ä–∏–º–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É.")

        result = await handle_voice_query(voice_data)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏: {result}")

        if result.get("status") == "success":
            # We use ready-made formatted text from voice_handler
            await message.answer(result["speech_response"])
        else:
            error_msg = result.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {error_msg}")
            await message.answer(f"‚ùå {error_msg}")

    except asyncio.TimeoutError:
        error_msg = "–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ"
        logger.error(error_msg)
        await message.answer("‚åõ –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        await message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@dp.message(F.text == "/start")
async def start_command(message: Message):
    """
    Handles the /start command with a reply keyboard and intro message.
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ÑπÔ∏è –Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É?")]
        ],
        resize_keyboard=True,
    )

    await message.answer(
        "üëã –í—ñ—Ç–∞—é! –î–ª—è —Ç–æ–≥–æ —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ, "
        "–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–∞–∑–≤–æ—é –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ —á–∏ —Å–µ–ª–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: *–ö–∏—ó–≤* üé§",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

async def main():
    """
    Starts the Telegram bot and begins polling for messages.

    This is the main entry point for the bot application.
    The function runs until interrupted or an error occurs.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)
    logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
