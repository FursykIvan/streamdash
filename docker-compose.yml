
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_DB: streamdash
      POSTGRES_USER: streamdash_user
      POSTGRES_PASSWORD: strongpassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    build: ./backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - postgres
    environment:
      - DATABASE_URL=postgresql+asyncpg://streamdash_user:strongpassword@postgres:5432/streamdash
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  producer:
    build: ./producer
    command: python producer.py
    depends_on:
      - kafka
    env_file:
      - ./producer/.env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - WEATHER_API_KEY=${WEATHER_API_KEY}

  telegram_bot:
    build:
      context: .
      dockerfile: telegram_bot/Dockerfile
    command: python -u bot.py
    restart: unless-stopped
    depends_on:
      - backend
      - kafka
    env_file:
      - ./telegram_bot/.env
      - .env
    environment:
      - BACKEND_URL=http://backend:8000
      - PYTHONPATH=/app
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
    volumes:
      - ./telegram_bot:/app
      - ./producer:/app/producer
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend

volumes:
  postgres_data:
